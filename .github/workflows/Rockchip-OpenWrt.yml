name: openwrt_rockchip_docker

on:
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/rockchip.config
  DIY_P1_SH: diy-script.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  OPENWRT_NAME: openwrt
  OPENWRT_NAME1: rockchip

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 2048
        remove-dotnet: 'true'

    - name: Cache OpenWrt downloads
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-dl-${{ env.REPO_BRANCH }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize the compilation environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set -e
        sudo -E apt-get -qq update
        # ÈÉ®ÂàÜÂåÖÂèØËÉΩ‰∏çÂ≠òÂú®ÔºåÂøΩÁï•ÈîôËØØ
        sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox powershell openjdk* dotnet* google* mysql* php* android* rename speedtest-cli || true
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo pip3 install pyelftools
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Install Go 1.25
      run: |
        wget https://go.dev/dl/go1.25.0.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf go1.25.0.linux-amd64.tar.gz
        sudo ln -sf /usr/local/go/bin/go /usr/bin/go
        go version

    - name: Show system info
      run: |
        echo "CPU: $(nproc) cores"
        uname -a
        lsb_release -a || true
        df -hT

    - name: Download firmware source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Cache OpenWrt feeds
      uses: actions/cache@v4
      with:
        path: openwrt/feeds
        key: ${{ runner.os }}-openwrt-feeds-${{ env.REPO_BRANCH }}
        restore-keys: |
          ${{ runner.os }}-openwrt-feeds-

    - name: Update & install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Run diy-script.sh
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Load config
      run: |
        [ -e "$CONFIG_FILE" ] && cp "$CONFIG_FILE" openwrt/.config

    - name: Download the installation packages
      id: package
      run: |
        cd openwrt
        cat <<EOF >> .config
        CONFIG_DOCKER_CGROUP_OPTIONS=y
        CONFIG_DOCKER_NET_MACVLAN=y
        CONFIG_DOCKER_STO_EXT4=y
        CONFIG_PACKAGE_docker=y
        CONFIG_PACKAGE_docker-compose=y
        CONFIG_PACKAGE_dockerd=y
        CONFIG_PACKAGE_luci-app-dockerman=y
        CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y
        CONFIG_PACKAGE_luci-lib-docker=y
        EOF
        make defconfig
        make download -j$(nproc)
        make checksum
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || (echo "Âπ∂Ë°åÁºñËØëÂ§±Ë¥•ÔºåÂ∞ùËØï‰∏≤Ë°åÁºñËØë..." && make -j1) || (echo "ÂêØÁî®ËØ¶ÁªÜÊó•Âøó..." && make -j1 V=s)
        echo "date1=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        echo "date2=$(date "+%YÂπ¥%mÊúà%dÊó•")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload build log if failed
      if: failure() && steps.compile.conclusion == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: build_log
        path: openwrt/build.log

    - name: Organize and Rename Files
      id: organize
      if: ${{ env.UPLOAD_FIRMWARE == 'true' && !cancelled() }}
      run: |
        cd openwrt/bin/targets/rockchip/armv8
        rm -rf packages *.buildinfo *.manifest *.json
        for file in openwrt-*-*.img.gz; do
            mv "$file" "docker-$file"
        done
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: List LuCI Apps
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/rockchip/armv8
        echo "============= Â∑≤ÁºñËØëËøõÂõ∫‰ª∂ÁöÑ LuCI Êèí‰ª∂ ============="
        grep "^luci-app-" *.manifest || echo "Êú™Ê£ÄÊµãÂà∞ LuCI Êèí‰ª∂"
        echo "==================================================="

    - name: Upload the firmware to github
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.date1 }}_${{ env.OPENWRT_NAME }}_${{ env.OPENWRT_NAME1 }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tags
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.date2 }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "üì• Âõ∫‰ª∂‰∏ãËΩΩ" >> release.txt
        echo "ÁºñËØëÊó•Êúü: ${{ env.date2 }}" >> release.txt
        echo "Ê∫êÁ†Å: ${{ env.REPO_URL }} ÂàÜÊîØ: ${{ env.REPO_BRANCH }}" >> release.txt
        echo "ÂåÖÂê´Êèí‰ª∂Ôºö" >> release.txt
        grep "^CONFIG_PACKAGE_luci-app-" openwrt/.config >> release.txt || echo "Êó† LuCI Êèí‰ª∂" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Publish to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date2 }}_${{ env.OPENWRT_NAME }}_${{ env.OPENWRT_NAME1 }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
