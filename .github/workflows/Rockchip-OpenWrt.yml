name: Rockchip OpenWrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 18 */3 * *  # 每三天 18:00 UTC 自动编译

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/rockchip.config
  EXTRA_CONFIG: configs/extra.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Rockchip
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    # 1. 检查服务器性能信息
    - name: Check Server Performance
      run: |
        echo "⚠ 警告: 服务器性能有限，插件过多可能影响编译速度！"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo "CPU型号: $(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')"
        df -hT

    # 2. 初始化环境并安装依赖
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -y update
        sudo apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo timedatectl set-timezone "$TZ"

    # 3. 扩展磁盘空间
    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    # 4. Checkout 当前仓库（用于 workflow 文件和脚本）
    - name: Checkout
      uses: actions/checkout@v4

    # 5. 克隆 OpenWrt 源码
    - name: Clone Source Code
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --format="作者: %an")
        COMMIT_DATE=$(git show -s --format="时间: %ci")
        COMMIT_MESSAGE=$(git show -s --format="内容: %s")
        COMMIT_HASH=$(git show -s --format="hash: %H")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    # 6. 生成变量并应用配置
    - name: Load Custom Configuration and DIY Script
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cat $EXTRA_CONFIG >> $OPENWRT_PATH/.config
        cp $DIY_SCRIPT $OPENWRT_PATH/
        chmod +x $OPENWRT_PATH/$DIY_SCRIPT
        cd $OPENWRT_PATH
        ./$DIY_SCRIPT

    # 7. 缓存工具链，加快编译
    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: true
        mixkey: ${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    # 8. 下载 DL 包
    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    # 9. 编译固件
    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    # 10. 检查固件里包含的 luci-app
    - name: Check LuCI Apps in Firmware
      if: steps.compile.outputs.status == 'success'
      run: |
        MANIFEST=$(find $OPENWRT_PATH/bin/targets/ -name "*.manifest" | head -n 1)
        echo "固件中包含的 luci-app 包："
        grep "luci-app" "$MANIFEST" || echo "没有找到 luci-app"

    # 11. 上传固件到 Release
    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }} (rk33xx, rk35xx)
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
