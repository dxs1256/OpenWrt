name: Rockchip OpenWrt 编译流程

on:
  workflow_dispatch:
  schedule:
    - cron: 0 18 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/rockchip.config
  EXTRA_CONFIG: configs/extra.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Rockchip-R4S
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查服务器性能
      run: |
        echo "CPU核心数量: $(nproc)"
        echo "内存信息:" && free -h
        echo "磁盘信息:" && df -hT

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo timedatectl set-timezone "$TZ"

    - name: 签出源码
      uses: actions/checkout@v3

    - name: 释放磁盘空间
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /usr/local/lib/android /opt/hostedtoolcache
        docker rmi $(docker images -q) || true

    - name: 克隆 OpenWrt 源码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

    - name: 移动源码到大磁盘
      run: |
        sudo mkdir -p /mnt/openwrt
        sudo chown $USER:$USER /mnt/openwrt
        rsync -a --delete ./openwrt/ /mnt/openwrt/
        rm -rf ./openwrt
        ln -s /mnt/openwrt ./openwrt

    - name: 缓存下载包和 build_dir
      uses: actions/cache@v3
      with:
        path: |
          openwrt/dl
          openwrt/build_dir
        key: ${{ runner.os }}-openwrt-build-${{ hashFiles('configs/rockchip.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-build-

    - name: 使用缓存加速编译
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: true
        mixkey: master-r4s
        prefix: ${{ github.workspace }}/openwrt
        toolchain: true
        skip: false
        clean: false
        skip_saving: false
      env:
        REPO_URL: ${{ env.REPO_URL }}
        REPO_BRANCH: ${{ env.REPO_BRANCH }}
        CONFIG_FILE: ${{ env.CONFIG_FILE }}
        EXTRA_CONFIG: ${{ env.EXTRA_CONFIG }}
        DIY_SCRIPT: ${{ env.DIY_SCRIPT }}
        CLASH_KERNEL: ${{ env.CLASH_KERNEL }}
        CACHE_TOOLCHAIN: ${{ env.CACHE_TOOLCHAIN }}

    - name: 列出 LuCI 插件
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        grep "^luci-app-" *.manifest || echo "未检测到 LuCI 插件"

    - name: 整理输出文件
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: 上传固件到 Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }}-${{ github.run_number }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: false
        tag: ${{ env.FIRMWARE_TAG }}-${{ env.DATE }}-${{ github.run_id }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          - 平台架构: rk3399 (R4S)
          - 源码仓库: ${{ env.REPO_URL }}
          - 分支: ${{ env.REPO_BRANCH }}
          - 内核版本: ${{ env.KERNEL }}
          - 默认地址: 192.168.1.1
          - 默认密码: password
